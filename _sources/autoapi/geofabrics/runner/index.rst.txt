:py:mod:`geofabrics.runner`
===========================

.. py:module:: geofabrics.runner

.. autoapi-nested-parse::

   A convenience script for running the DEM generation pipelines contained in the processor
    module of geofabrics.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   geofabrics.runner.config_logging
   geofabrics.runner.setup_logging_for_run
   geofabrics.runner.run_processor_class
   geofabrics.runner.merge_dicts
   geofabrics.runner.from_instructions_dict
   geofabrics.runner.from_instructions_file



.. py:function:: config_logging(logging_filepath)

   Configure the root logger inhereited by all othr loggers.


.. py:function:: setup_logging_for_run(instructions, label)

   Setup logging for the current processor run


.. py:function:: run_processor_class(processor_class, processor_label, instructions)

   Run a processor class recording outputs in a unique log file and timing the
   execution.


.. py:function:: merge_dicts(dict_a, dict_b, logger, replace_a)

   Merge the contents of the dict_a and dict_b. Use recursion to merge
   any nested dictionaries. replace_a determines if the dict_a values are
   replaced or not if different values are in the dict_b.

   Adapted from https://stackoverflow.com/questions/7204805/how-to-merge-dictionaries-of-dictionaries

   :param dict_a  The dict to:
   :param dict_b  The location of the centre of the river mouth:
   :param replace_a If True any dict_a values are replaced if different values are in dict_b:


.. py:function:: from_instructions_dict(instructions)

   Run the DEM generation pipeline(s) given the specified instructions.
   If a benchmark is specified compare the result to the benchmark


.. py:function:: from_instructions_file(instructions_path)

   Run the DEM generation pipeline(s) given the specified instructions.
   If a benchmark is specified compare the result to the benchmark


