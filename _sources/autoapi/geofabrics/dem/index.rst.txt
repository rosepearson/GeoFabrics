:py:mod:`geofabrics.dem`
========================

.. py:module:: geofabrics.dem

.. autoapi-nested-parse::

   This module contains classes associated with loading, generating, and combining
   DEMs.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   geofabrics.dem.CoarseDem
   geofabrics.dem.DemBase
   geofabrics.dem.HydrologicallyConditionedDem
   geofabrics.dem.LidarBase
   geofabrics.dem.RawDem
   geofabrics.dem.RoughnessDem



Functions
~~~~~~~~~

.. autoapisummary::

   geofabrics.dem.read_file_with_pdal
   geofabrics.dem.roughness_from_points
   geofabrics.dem.elevation_from_points
   geofabrics.dem.calculate_idw
   geofabrics.dem.calculate_linear
   geofabrics.dem.load_tiles_in_chunk
   geofabrics.dem.roughness_over_chunk
   geofabrics.dem.elevation_over_chunk
   geofabrics.dem.chunk_coarse_dem



Attributes
~~~~~~~~~~

.. autoapisummary::

   geofabrics.dem.delayed_chunk_coarse_dem
   geofabrics.dem.delayed_roughness_over_chunk
   geofabrics.dem.delayed_elevation_over_chunk


.. py:class:: CoarseDem(dem_file, extents, set_foreshore = True)


   A class to manage coarse or background DEMs in the catchment context

   Specifically, clip within the catchment land and foreshore. There is the option to
   clip outside any LiDAR using the
   optional 'exclusion_extent' input.

   If set_foreshore is True all positive DEM values in the foreshore are set to zero.

   .. py:property:: dem
      :type: xarray.Dataset

      Return the DEM over the catchment region

   .. py:property:: resolution
      :type: float

      Return the largest dimension of the coarse DEM resolution

   .. py:property:: points
      :type: numpy.ndarray

      The coarse DEM points after any extent or foreshore value
      filtering.

   .. py:property:: extents
      :type: geopandas.GeoDataFrame

      The extents for the coarse DEM

   .. py:property:: empty
      :type: bool

      True if the DEM is empty

   .. py:method:: __del__()

      Ensure the memory associated with netCDF files is properly freed.


   .. py:method:: calculate_dem_bounds(dem)

      Return the bounds for a DEM.



.. py:class:: DemBase(catchment_geometry)


   Bases: :py:obj:`abc.ABC`

   An abstract class to manage the different geofabric layers in a
   catchment context. The geofabruc has a z, and data_source layer and may
   sometimes also have a zo (roughness length) and lidar_source layer.

   It is represented by an XArray dataset and is expected to be saved as a
   netCDF file.

   Standard data catcegories are specified in the SOURCE_CLASSIFICATION
   variable.

   :param catchment_geometry: Defines the spatial extents of the catchment, land, foreshore, and offshore
                              regions
   :param extents: Defines the extents of any dense (LiDAR or refernence DEM) values already added.

   .. py:property:: dem
      :type: xarray.Dataset
      :abstractmethod:

      Return the DEM over the catchment region


.. py:class:: HydrologicallyConditionedDem(catchment_geometry, raw_dem_path, interpolation_method)


   Bases: :py:obj:`DemBase`

   A class to manage loading in an already created and saved dense DEM that has yet
   to have an offshore DEM associated with it.

   :param Logic controlling behaviour:
                                       interpolation_method
                                           If not None, interpolate using that method. Valid options are 'linear',
                                           'nearest', and 'cubic'

   .. py:property:: raw_extents

      Return the combined DEM from tiles and any interpolated offshore values

   .. py:property:: dem

      Return the combined DEM from tiles and any interpolated offshore values

   .. py:method:: __del__()

      Ensure the memory associated with netCDF files is properly freed.


   .. py:method:: interpolate_ocean_bathymetry(bathy_contours)

      Performs interpolation offshore outside LiDAR extents using the SciPy RBF
      function.


   .. py:method:: interpolate_waterways(estimated_bathymetry, method)

      Performs interpolation of the estimated waterways.


   .. py:method:: interpolate_rivers(estimated_bathymetry, method)

      Performs interpolation from estimated bathymetry points within a polygon
      using the specified interpolation approach after filtering the points based
      on the type label. The type_label also determines the source classification.



.. py:class:: LidarBase(catchment_geometry, chunk_size, elevation_range = None)


   Bases: :py:obj:`DemBase`

   A class with some base methods for reading in LiDAR data.

   :param catchment_geometry: Defines the geometry of the catchment
   :param elevation_range: The range of valid LiDAR elevations. i.e. define elevation filtering to apply.

   .. py:property:: dem

      Return the positivelly indexed DEM from tiles

   .. py:method:: __del__()

      Ensure the memory associated with netCDF files is properly freed.


   .. py:method:: add_lidar(lidar_datasets_info, chunk_size, lidar_classifications_to_keep, metadata)
      :abstractmethod:

      Read in all LiDAR files and use to create a 'raw' DEM.

      :param lidar_datasets_info: A dictionary of information for each specified LIDAR dataset - For
                                  each this includes: a list of LAS files, CRS, and tile index file.
      :param chunk_size: The chunk size in pixels for parallel/staged processing
      :param lidar_classifications_to_keep: A list of LiDAR classifications to keep - '2' for ground, '9' for water.
                                            See https://www.asprs.org/wp-content/uploads/2010/12/LAS_1_4_r13.pdf for
                                            standard list
      :param meta_data: Information to include in the created DEM - must include
                        `dataset_mapping` key if datasets (not a single LAZ file) included.


   .. py:method:: save_dem(filename, dem, encoding = None)

      Save the DEM to a netCDF file and optionally reload it

      :param filename: .nc file where to save the DEM
      :param reload: reload DEM from the saved file


   .. py:method:: save_and_load_dem(filename)

      Update the saved file cache for the DEM (self._dem) as a netCDF file.



.. py:class:: RawDem(catchment_geometry, lidar_interpolation_method, drop_offshore_lidar, buffer_cells, elevation_range = None, chunk_size = None)


   Bases: :py:obj:`LidarBase`

   A class to manage the creation of a 'raw' DEM from LiDAR tiles, and/or a
   coarse DEM.

   :param drop_offshore_lidar: If True only keep LiDAR values within the foreshore and land regions defined by
                               the catchment_geometry. If False keep all LiDAR values.
   :param elevation_range: Optitionally specify a range of valid elevations. Any LiDAR points with
                           elevations outside this range will be filtered out.
   :param lidar_interpolation_method: The interpolation method to apply to LiDAR during downsampling/averaging.
                                      Options are: mean, median, IDW, max, min, STD.
   :param buffer_cells - the number of empty cells to keep around LiDAR cells for: interpolation after the coarse DEM added to ensure a smooth boundary.
   :param chunk_size: The chunk size in pixels for parallel/staged processing

   .. py:property:: no_values_mask

      No values mask from DEM within land and foreshore region

   .. py:method:: add_lidar(lidar_datasets_info, lidar_classifications_to_keep, metadata)

      Read in all LiDAR files and use to create a 'raw' DEM.

      :param lidar_datasets_info: A dictionary of information for each specified LIDAR dataset - For
                                  each this includes: a list of LAS files, CRS, and tile index file.
      :param lidar_classifications_to_keep: A list of LiDAR classifications to keep - '2' for ground, '9' for water.
                                            See https://www.asprs.org/wp-content/uploads/2010/12/LAS_1_4_r13.pdf for
                                            standard list
      :param meta_data: Information to include in the created DEM - must include
                        `dataset_mapping` key if datasets (not a single LAZ file) included.


   .. py:method:: clip_lidar()

      Clip the  a 'raw' DEM. Should be called immediately after the add_lidar function.


   .. py:method:: add_coarse_dem(coarse_dem_path, area_threshold)

      Check if gaps in DEM on land, if so iterate through coarse DEMs
      adding missing detail.

      Note the Coarse DEM values are only applied on land and not
      in the ocean.

      :param coarse_dem_path - coarse DEM file paths to try add:
      :param area_threshold - the ratio of area without LiDAR required to for: coarse DEMs to be used.



.. py:class:: RoughnessDem(catchment_geometry, hydrological_dem_path, temp_folder, interpolation_method, default_values, drop_offshore_lidar, chunk_size = None, elevation_range = None)


   Bases: :py:obj:`LidarBase`

   A class to add a roughness (zo) layer to a hydrologically conditioned DEM.

   They STD and mean height of ground cover classified points are calculated from the
   LiDAR data and z (elevation) layer of the hydrologically conditioned DEM, and used
   to estimate roughness emperically.

   RoughnessDem logic can be controlled by the constructor inputs.

   :param catchment_geometry: Defines the geometry of the catchment
   :param hydrological_dem_path: The path to the hydrologically conditioned DEM.
   :param interpolation_method: If not None, interpolate using that method. Valid options are 'linear',
                                'nearest', and 'cubic'.
   :param lidar_interpolation_method: The interpolation method to apply to LiDAR. Options are: mean, median, IDW.

   .. py:method:: add_lidar(lidar_datasets_info, lidar_classifications_to_keep, metadata, parameters)

      Read in all LiDAR files and use the point cloud distribution,
      data_source layer, and hydrologiaclly conditioned elevations to
      estimate the roughness across the DEM.

      :param lidar_datasets_info: A dictionary of information for each specified LIDAR dataset - For
                                  each this includes: a list of LAS files, CRS, and tile index file.
      :param lidar_classifications_to_keep: A list of LiDAR classifications to keep - '2' for ground, '9' for water.
                                            See https://www.asprs.org/wp-content/uploads/2010/12/LAS_1_4_r13.pdf for
                                            standard list
      :param meta_data: Information to include in the created DEM - must include
                        `dataset_mapping` key if datasets (not a single LAZ file) included.
      :param parameters: The roughness equation parameters.



.. py:function:: read_file_with_pdal(lidar_file, region_to_tile, crs, source_crs = None)

   Read a tile file in using PDAL with input and output CRS specified.


.. py:function:: roughness_from_points(point_cloud, xy_out, xy_ground, options, eps = 0, leaf_size = 10)

   Calculate DEM elevation values at the specified locations using the selected
   approach. Options include: mean, median, and inverse distance weighing (IDW). This
   implementation is based on the scipy.spatial.KDTree


.. py:function:: elevation_from_points(point_cloud, xy_out, options, eps = 0, leaf_size = 10)

   Calculate DEM elevation values at the specified locations using the selected
   approach. Options include: mean, median, and inverse distance weighing (IDW). This
   implementation is based on the scipy.spatial.KDTree


.. py:function:: calculate_idw(near_indices, point, tree, point_cloud, smoothing = 0, power = 2)

   Calculate the IDW mean of the 'near_indices' points. This implementation is based
   on the scipy.spatial.KDTree


.. py:function:: calculate_linear(near_indices, point, tree, point_cloud)

   Calculate linear interpolation of the 'near_indices' points. Take the straight
   mean if the points are co-linear or too few for linear interpolation.


.. py:function:: load_tiles_in_chunk(lidar_files, source_crs, chunk_region_to_tile, crs)

   Read in all LiDAR files within the chunked region - clipped to within
   the region within which to rasterise.


.. py:function:: roughness_over_chunk(dim_x, dim_y, tile_points, xy_ground, options)

   Rasterise all points within a chunk.


.. py:function:: elevation_over_chunk(dim_x, dim_y, tile_points, options)

   Rasterise all points within a chunk.


.. py:function:: chunk_coarse_dem(dem_file, extents, set_foreshore)

   Load in a coarse DEM and trim to points within bbox and return the
   points.


.. py:data:: delayed_chunk_coarse_dem

   Wrap the `roughness_over_chunk` routine in dask.delayed

.. py:data:: delayed_roughness_over_chunk

   Wrap the `rasterise_chunk` routine in dask.delayed

.. py:data:: delayed_elevation_over_chunk

   Wrap the `load_tiles_in_chunk` routine in dask.delayed

